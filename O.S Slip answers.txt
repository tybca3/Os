------------------------------------------------Slip 1-----------------------------------------------------------------
Q1)
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
int main()
{
    int pid;
    int n;
    pid=fork();
    if(pid==0)
    {
    n=nice(-1);
    printf("The higher CPU priority of the process is: %d\n",n);
    }
    else
    {
        wait(NULL);
        printf("Parent process completed!");
    }
    return 0;
}
Q2)
#include<stdio.h>
int main()
{
    int pg_f=0;
    int n=3;
    int ref_s [15]={3,4,5,6,3,4,7,3,4,5,6,7,2,4,6};
    int frames[3]={-1,-1,-1};
    int next=0;
    int page,found;//FIFO Pointer    
    printf("Page Scheduling: \n");
    for(int i=0;i<15;i++)
    {
         page=ref_s[i];
         found=0;
    }
    for(int j=0;j<n;j++)    //check if page is already in the frame
    {
        if(frames[j]==page)
        {
            found=1;
            break;
        }
    }
    if(!found)
    {
        frames[next]=page;
        next=(next+1)%n;
        pg_f++;
    }
    printf("Ref %d -> ", page);
    for(int k = 0; k < n; k++) 
    {
        printf("%d ", frames[k]);
    }
    printf("\n");
    return 0;
}

-------------------------------------------------------------Slip 2-----------------------------------------------------------------------------------------------------
Q1)
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
int main()
{
    int pid;
    pid=fork();
    if(pid<0)
    {
        printf("Fork failed!");
    }
    else if(pid==0)  
    {
    printf("Child Process Id: %d, ParentProcess Id: %d\n",getpid(),getpp    id());
    printf("Hello World\n");
    }
    else
    {   
        wait(NULL);
        printf("Parent process Id: %d\n",getpid());
        printf("Hi");
    }
    return 0;
}
Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int cpu_burst[n];
    int total_burst[n];
    int turnaround_time[n];
    int waiting_time[n];
    int completion_time[n];
    int i;

    srand(time(0));

    for(i = 0; i < n; i++) {
        printf("Enter initial CPU burst for P%d: ", i+1);
        scanf("%d", &cpu_burst[i]);
        total_burst[i] = cpu_burst[i];
    }

    int current_time = 0;
    printf("\nGantt Chart:\n");

    for(i = 0; i < n; i++) {
        printf("| P%d(%d) ", i+1, cpu_burst[i]);
        current_time += cpu_burst[i];
        current_time += 2;
        int next_burst = rand() % 5 + 1;
        cpu_burst[i] = next_burst;
        total_burst[i] += next_burst;
        completion_time[i] = current_time;
    }
    printf("|\n");

    double total_TAT = 0, total_WT = 0;
    printf("\nProcess\tTAT\tWT\n");
    for(i = 0; i < n; i++) {
        turnaround_time[i] = completion_time[i];
        waiting_time[i] = turnaround_time[i] - total_burst[i];
        total_TAT += turnaround_time[i];
        total_WT += waiting_time[i];
        printf("P%d\t%d\t%d\n", i+1, turnaround_time[i], waiting_time[i]);
    }

    printf("\nAverage TAT: %.2f\n", total_TAT/n);
    printf("Average WT : %.2f\n", total_WT/n);

    return 0;
}

-------------------------------------Slip 3-----------------------------------------
Q1)
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
int main()
{
    int pid;
    pid=fork();
    if(pid<0)
    {
        printf("Fork failed!");
    }
    else if(pid==0)  
    {
    printf("Child Process Id: %d, ParentProcess Id: %d\n",getpid(),getppid());
    execl("/bin/ls", "ls", NULL);
        printf("Exec failed\n");
    }
    else
    {   
        wait(NULL);
        printf("Parent process Id: %d\n",getpid());
        printf("Control returned to parent after child termination\n");
    }
    return 0;
}
Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int arrival_time[n], cpu_burst[n], total_burst[n], completion_time[n], turnaround_time[n], waiting_time[n];
    int i, j;

    srand(time(0));

    for(i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i+1);
        scanf("%d", &arrival_time[i]);
        printf("Enter initial CPU burst for P%d: ", i+1);
        scanf("%d", &cpu_burst[i]);
        total_burst[i] = cpu_burst[i];
    }

    for(i = 0; i < n-1; i++) {
        for(j = 0; j < n-i-1; j++) {
            if(arrival_time[j] > arrival_time[j+1]) {
                int temp = arrival_time[j]; arrival_time[j] = arrival_time[j+1]; arrival_time[j+1] = temp;
                temp = cpu_burst[j]; cpu_burst[j] = cpu_burst[j+1]; cpu_burst[j+1] = temp;
                temp = total_burst[j]; total_burst[j] = total_burst[j+1]; total_burst[j+1] = temp;
            }
        }
    }

    int current_time = 0;
    printf("\nGantt Chart:\n");

    for(i = 0; i < n; i++) {
        if(current_time < arrival_time[i])
            current_time = arrival_time[i];
        printf("| P%d(%d) ", i+1, cpu_burst[i]);
        current_time += cpu_burst[i];
        current_time += 2;
        int next_burst = rand() % 5 + 1;
        cpu_burst[i] = next_burst;
        total_burst[i] += next_burst;
        completion_time[i] = current_time;
    }
    printf("|\n");

    double total_TAT = 0, total_WT = 0;
    printf("\nProcess\tTAT\tWT\n");
    for(i = 0; i < n; i++) {
        turnaround_time[i] = completion_time[i] - arrival_time[i];
        waiting_time[i] = turnaround_time[i] - total_burst[i];
        total_TAT += turnaround_time[i];
        total_WT += waiting_time[i];
        printf("P%d\t%d\t%d\n", i+1, turnaround_time[i], waiting_time[i]);
    }

    printf("\nAverage TAT: %.2f\n", total_TAT/n);
    printf("Average WT : %.2f\n", total_WT/n);

    return 0;
}

----------------------------------------Slip 4--------------------------------------------
Q1)
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid;
    pid = fork();

    if(pid < 0) {
        printf("Fork failed!\n");
    }
    else if(pid == 0) {
        sleep(5);
        printf("Child PID: %d, Parent PID: %d\n", getpid(), getppid());
        printf("I am the orphan child now.\n");
    }
    else {
        printf("Parent PID: %d\n", getpid());
        printf("Parent is terminating.\n");
    }

    return 0;
}
Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int arrival_time[n], cpu_burst[n], priority[n], total_burst[n];
    int completion_time[n], turnaround_time[n], waiting_time[n], executed[n];
    int i;

    srand(time(0));

    for(i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i+1);
        scanf("%d", &arrival_time[i]);
        printf("Enter initial CPU burst for P%d: ", i+1);
        scanf("%d", &cpu_burst[i]);
        printf("Enter priority for P%d (lower number = higher priority): ", i+1);
        scanf("%d", &priority[i]);
        total_burst[i] = cpu_burst[i];
        executed[i] = 0;
    }

    int current_time = 0, completed = 0;
    printf("\nGantt Chart:\n");

    while(completed < n) {
        int idx = -1, min_priority = 10000;
        for(i = 0; i < n; i++) {
            if(arrival_time[i] <= current_time && !executed[i] && priority[i] < min_priority) {
                min_priority = priority[i];
                idx = i;
            }
        }

        if(idx == -1) {
            current_time++;
            continue;
        }

        printf("| P%d(%d) ", idx+1, cpu_burst[idx]);
        current_time += cpu_burst[idx];
        current_time += 2;
        int next_burst = rand() % 5 + 1;
        cpu_burst[idx] = next_burst;
        total_burst[idx] += next_burst;
        completion_time[idx] = current_time;
        executed[idx] = 1;
        completed++;
    }
    printf("|\n");

    double total_TAT = 0, total_WT = 0;
    printf("\nProcess\tTAT\tWT\n");
    for(i = 0; i < n; i++) {
        turnaround_time[i] = completion_time[i] - arrival_time[i];
        waiting_time[i] = turnaround_time[i] - total_burst[i];
        total_TAT += turnaround_time[i];
        total_WT += waiting_time[i];
        printf("P%d\t%d\t%d\n", i+1, turnaround_time[i], waiting_time[i]);
    }

    printf("\nAverage TAT: %.2f\n", total_TAT/n);
    printf("Average WT : %.2f\n", total_WT/n);

    return 0;
}

-----------------------------------------------Slip 5---------------------------------------
Q1)
Same as Slip 1(Q1)
Q2)
Same as Slip 1(Q2)

------------------------------------------------Slip 6--------------------------------------
Q1)
#include <stdio.h>
#include <time.h>

int main() {
    clock_t start, end;
    double time_taken;

    start = clock();

    int i, sum = 0;
    for(i = 1; i <= 1000; i++)
        sum += i;

    end = clock();
    time_taken = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Sum = %d\n", sum);
    printf("Time taken = %f seconds\n", time_taken);

    return 0;
}
Q2)
Same as Slip 1(Q2)

--------------------------------------------------Slip 7--------------------------------------
Q1)
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid;
    pid = fork();

    if(pid < 0) {
        printf("Fork failed!\n");
        return 1;
    }
    else if(pid == 0) {
        printf("Child PID: %d, Parent PID: %d\n", getpid(), getppid());
        execl("/bin/ls", "ls", NULL);
        printf("Exec failed\n");
    }
    else {
        printf("Parent PID: %d\n", getpid());
        sleep(5);
        printf("Parent woke up after sleep\n");
    }

    return 0;
}
Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int arrival_time[n], cpu_burst[n], total_burst[n];
    int completion_time[n], turnaround_time[n], waiting_time[n];
    int i;

    srand(time(0));

    for(i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i+1);
        scanf("%d", &arrival_time[i]);
        printf("Enter initial CPU burst for P%d: ", i+1);
        scanf("%d", &cpu_burst[i]);
        total_burst[i] = cpu_burst[i];
    }

    int current_time = 0;
    printf("\nGantt Chart:\n");

    for(i = 0; i < n; i++) {
        if(current_time < arrival_time[i])
            current_time = arrival_time[i];
        printf("| P%d(%d) ", i+1, cpu_burst[i]);
        current_time += cpu_burst[i];
        current_time += 2;
        int next_burst = rand() % 5 + 1;
        cpu_burst[i] = next_burst;
        total_burst[i] += next_burst;
        completion_time[i] = current_time;
    }
    printf("|\n");

    double total_TAT = 0, total_WT = 0;
    printf("\nProcess\tTAT\tWT\n");
    for(i = 0; i < n; i++) {
        turnaround_time[i] = completion_time[i] - arrival_time[i];
        waiting_time[i] = turnaround_time[i] - total_burst[i];
        total_TAT += turnaround_time[i];
        total_WT += waiting_time[i];
        printf("P%d\t%d\t%d\n", i+1, turnaround_time[i], waiting_time[i]);
    }

    printf("\nAverage TAT: %.2f\n", total_TAT/n);
    printf("Average WT : %.2f\n", total_WT/n);

    return 0;
}

------------------------------------------Slip 8----------------------------------------
Q1)
#include <stdio.h>

int main() {
    int n, m;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    int max[n][m], alloc[n][m], need[n][m];
    int i, j;

    printf("Enter Max matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter Allocation matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    printf("\nNeed Matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++)
            printf("%d ", need[i][j]);
        printf("\n");
    }

    return 0;
}
Q2)
#include <stdio.h>

int main() {
    int n = 3;
    int ref_str[] = {12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};
    int len = sizeof(ref_str)/sizeof(ref_str[0]);
    int frames[3], page_faults = 0;
    int i, j, k, found, replace;

    for(i = 0; i < n; i++)
        frames[i] = -1;

    printf("Page Scheduling:\n");

    for(i = 0; i < len; i++) {
        found = 0;
        for(j = 0; j < n; j++) {
            if(frames[j] == ref_str[i]) {
                found = 1;
                break;
            }
        }

        if(!found) {
            int empty = -1;
            for(j = 0; j < n; j++)
                if(frames[j] == -1)
                    empty = j;

            if(empty != -1)
                replace = empty;
            else {
                int farthest = -1, index = -1;
                for(j = 0; j < n; j++) {
                    int future = -1;
                    for(k = i + 1; k < len; k++) {
                        if(frames[j] == ref_str[k]) {
                            future = k;
                            break;
                        }
                    }
                    if(future == -1) {
                        index = j;
                        break;
                    }
                    if(future > farthest) {
                        farthest = future;
                        index = j;
                    }
                }
                replace = index;
            }
            frames[replace] = ref_str[i];
            page_faults++;
        }

        printf("Ref %d -> [", ref_str[i]);
        for(j = 0; j < n; j++) {
            if(frames[j] != -1)
                printf("%d", frames[j]);
            else
                printf(" ");
            if(j != n - 1) printf(" ");
        }
        printf("]\n");
    }

    printf("Total number of page faults: %d\n", page_faults);
    return 0;
}

---------------------------------------------------Slip 9-----------------------------------
Q1)
Same as Slip 8(Q1)
Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n, tq;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter time quantum: ");
    scanf("%d", &tq);

    int arrival[n], burst[n], rem[n], completion[n], tat[n], wt[n];
    int i, t = 0, done = 0;
    srand(time(0));

    for(i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &arrival[i]);
        printf("Enter CPU burst for P%d: ", i + 1);
        scanf("%d", &burst[i]);
        rem[i] = burst[i];
    }

    printf("\nGantt Chart:\n");
    while(done < n) {
        int executed = 0;
        for(i = 0; i < n; i++) {
            if(rem[i] > 0 && arrival[i] <= t) {
                executed = 1;
                if(rem[i] > tq) {
                    printf("| P%d ", i + 1);
                    t += tq + 2;
                    rem[i] -= tq;
                } else {
                    printf("| P%d ", i + 1);
                    t += rem[i] + 2;
                    rem[i] = 0;
                    completion[i] = t;
                    done++;
                }
            }
        }
        if(!executed) t++;
    }
    printf("|\n");

    double totalTAT = 0, totalWT = 0;
    printf("\nProcess\tTAT\tWT\n");
    for(i = 0; i < n; i++) {
        tat[i] = completion[i] - arrival[i];
        wt[i] = tat[i] - burst[i];
        totalTAT += tat[i];
        totalWT += wt[i];
        printf("P%d\t%d\t%d\n", i + 1, tat[i], wt[i]);
    }

    printf("\nAverage Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);

    return 0;
}

-----------------------------------------------------Slip 10----------------------------------------------------------
Q1)
Same as Slip 4(Q1)
Q2)
Same as Slip 7(Q2)

--------------------------------------------Slip 11-------------------------------------------
Q1)
Same as Slip 2(Q1)
Q2)
#include <stdio.h>

int main() {
    int n;
    printf("Enter number of memory frames: ");
    scanf("%d", &n);

    int ref_str[] = {0, 2, 1, 6, 4, 0, 1, 0, 3, 1, 2, 1};
    int len = sizeof(ref_str) / sizeof(ref_str[0]);
    int frames[n], i, j, page_faults = 0, next = 0, found;

    for(i = 0; i < n; i++)
        frames[i] = -1;

    printf("Page Scheduling:\n");

    for(i = 0; i < len; i++) {
        found = 0;
        for(j = 0; j < n; j++) {
            if(frames[j] == ref_str[i]) {
                found = 1;
                break;
            }
        }

        if(!found) {
            frames[next] = ref_str[i];
            next = (next + 1) % n;
            page_faults++;
        }

        printf("Ref %d -> [", ref_str[i]);
        for(j = 0; j < n; j++) {
            if(frames[j] != -1)
                printf("%d", frames[j]);
            else
                printf(" ");
            if(j != n - 1) printf(" ");
        }
        printf("]\n");
    }

    printf("Total number of page faults: %d\n", page_faults);
    return 0;
}

---------------------------------------Slip 12--------------------------------------------------
Q1)
Same as Slip 10(Q1)
Q2)
Same as Slip 10(Q2)

-------------------------------------------Slip 13-------------------------------------------
Q1)
Same as Slip 1(Q1)
Q2)
Same as Slip 2(Q2)

---------------------------------------Slip 14--------------------------------------------
Q1)
Same as Slip 6(Q1)
Q2) 
Same as Slip 11(Q2)

-----------------------------------------Slip 15-----------------------------------------
Q1)58
Same as Slip 9(Q1)
Q2)
Same as Slip 7(Q2)

---------------------------------------------Slip 16-------------------------------------
Q1)
Same as Slip  14(Q1)
Q2)
Same as Slip  12(Q2)

-------------------------------------Slip 17-------------------------------------------------------
Q1)
#include <stdio.h>

int main() {
    int n, m;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    int alloc[n][m], max[n][m], avail[m], need[n][m];
    int i, j, sum;

    printf("Enter Allocation Matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter Maximum Matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    for(j = 0; j < m; j++) {
        sum = 0;
        for(i = 0; i < n; i++)
            sum += alloc[i][j];
        avail[j] = sum + 1;
    }

    printf("Minimum number of resources needed to avoid deadlock:\n");
    for(j = 0; j < m; j++)
        printf("Resource %d: %d\n", j + 1, avail[j]);

    return 0;
}
Q2)
Same as Slip 17(Q2)

----------------------------------Slip 18---------------------------------------------
Q1)
Same as Slip 8(Q1)
Q2)
Same as Slip 17(Q2)

--------------------------------------Slip 19------------------------------------------
Q1)
#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        execl("/bin/ls", "ls", NULL);
    } else {
        sleep(5);
    }
    return 0;
}
Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], p[n], ct[n], tat[n], wt[n], done[n];
    srand(time(0));

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &at[i]);
        printf("Enter CPU burst for P%d: ", i + 1);
        scanf("%d", &bt[i]);
        printf("Enter priority for P%d (lower number = higher priority): ", i + 1);
        scanf("%d", &p[i]);
        done[i] = 0;
    }

    int t = 0, completed = 0;
    float total_tat = 0, total_wt = 0;
    printf("\nGantt Chart:\n");

    while (completed < n) {
        int idx = -1, min_p = 9999;
        for (int i = 0; i < n; i++) {
            if (at[i] <= t && !done[i] && p[i] < min_p) {
                min_p = p[i];
                idx = i;
            }
        }
        if (idx == -1) {
            t++;
            continue;
        }
        printf("| P%d ", idx + 1);
        t += bt[idx] + 2;
        ct[idx] = t;
        tat[idx] = ct[idx] - at[idx];
        wt[idx] = tat[idx] - bt[idx];
        total_tat += tat[idx];
        total_wt += wt[idx];
        done[idx] = 1;
        completed++;
        bt[idx] = rand() % 10 + 1;
    }

    printf("|\n\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", i + 1, at[i], bt[i], p[i], ct[i], tat[i], wt[i]);

    printf("\nAverage Turnaround Time: %.2f", total_tat / n);
    printf("\nAverage Waiting Time: %.2f\n", total_wt / n);
    return 0;
}

--------------------------------Slip 20------------------------------------------------------
Q1)
Same as Slip 19(Q1)
Q2)
Same as Slip 15(Q2)


------------------------------------------------------------!!!-------------------------------------------------